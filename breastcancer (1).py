# -*- coding: utf-8 -*-
"""breastcancer.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1vNXoIl1dha7qrkrEj--9n5nxSakcwbKe
"""

import os

os.environ['KAGGLE_CONFIG_DIR'] = "/content/drive/MyDrive/project1"

##%cd "/content/drive/MyDrive/project1"

#kaggle datasets download -d paultimothymooney/breast-histopathology-images

#!unzip \*.zip  && rm *.zip

!pip install tensorflow  opencv-python matplotlib



!pip list

import tensorflow as tf
import os

import cv2
import imghdr
from matplotlib import pyplot as plt

!pip install --upgrade tensorflow

IMAGE_SIZE = [224, 224]
data_dir="/content/drive/MyDrive/10253/10253"

d=os.listdir(data_dir)

from google.colab import drive
drive.mount('/content/drive')

os.listdir(os.path.join(data_dir,'0'))

for image_class in os.listdir(data_dir):
  print(image_class)

img=cv2.imread(os.path.join("/content/drive/MyDrive/10253/10253",'0','/content/drive/MyDrive/10253/10253/0/10253_idx5_x1001_y1501_class0.png'))

img.shape

plt.imshow(cv2.cvtColor(img,cv2.COLOR_BGR2RGB))

image_exts=['jpeg','jpg','bmp','png']

for image_class in os.listdir(data_dir):
       for image in os.listdir(os.path.join(data_dir, image_class)):
            image_path = os.path.join(data_dir, image_class, image)
            try:
              img = cv2.imread(image_path)
              tip = imghdr.what(image_path)
              if tip not in image_exts:
                      print('Image not in ext list f)' .format(image_path))
                      os.remove(image_path)
              else:
                print("no issue")
            except Exception as e:
                   print('Issue with image fÅ‚'.format(image_path))

"""**LOAD** **DATASET**"""

data='/content/drive/MyDrive/10253/10253'

import numpy as np
from matplotlib import pyplot as plt

data=tf.keras.utils.image_dataset_from_directory('/content/drive/MyDrive/10253/10253')

data_iterator=data.as_numpy_iterator()
data_iterator

#image represented as numpy arrays
batch=data_iterator.next()

#class 1=malignant
#class=0=bengin
#class
#print(batch[0])
batch[1]

batch[0].shape

batch[0].max()

fig, ax=plt.subplots(ncols=8,figsize=(20,20))
for idx,img in enumerate(batch[0][:8]):
  ax[idx].imshow(img.astype(int))
  ax[idx].title.set_text(batch[1][idx])

"""**PREPROCESS DATA**"""

scaled=batch[0]/255

scaled.max()

"""**scale data**"""

#x=images
#y=target variable
data=data.map(lambda x,y: (x/255,y))

scaled_iterator=data.as_numpy_iterator()

batch=scaled_iterator.next()

batch[0].min()

fig, ax=plt.subplots(ncols=8,figsize=(20,20))
for idx,img in enumerate(batch[0][:8]):
  ax[idx].imshow(img)
  ax[idx].title.set_text(batch[1][idx])

"""**SPLIT DATA**"""

print("Number of batches=",len(data))
print("each batch consists of 32 images")

train_size=int(len(data)*.7)
val_size=int(len(data)*.2)+1
test_size=int(len(data)*.1)+1
print("traning data=",train_size,"batches")
print("validation data=",val_size,"batches")
print("test dat=",test_size,"batches")

train=data.take(train_size)
val=data.skip(train_size).take(val_size)
test=data.skip(train_size+val_size).take(test_size)

print(len(train))
print(len(val))
print(len(test))

""" **MODEL**"""

!pip install tensorflow

!pip install --upgrade tensorflow

from tensorflow.keras.models import Sequential
 from tensorflow.keras.layers import Conv2D, MaxPooling2D, Dense, Flatten

model =Sequential()

#input layer(adding data sequentially to the input layer)
#convolution consists of 16 filters with 3*3 pixels,stride=1 moves 1 pixel each tym
#activation function=relu(rectified linear unit) consists only positive values
model.add(Conv2D(16, (3,3), 1, activation='relu', input_shape=(256,256,3)))
model.add(MaxPooling2D())
#layer 2
model.add(Conv2D(32, (3,3), 1, activation='relu'))
model.add(MaxPooling2D())
#layer 3
model. add(Conv2D(16, (3,3), 1, activation='relu'))
model. add(MaxPooling2D())
#flatten layer
model.add(Flatten())

model.add(Dense(256, activation='relu'))
model.add(Dense(1, activation='sigmoid'))

#optimizer=adam
model.compile('adam',loss=tf.losses.BinaryCrossentropy(),metrics=['accuracy'])

model.summary()

"""**TRAIN**"""

logs="/content/drive/MyDrive/logs"

logdir=logs

#callbacks are useful to save the model at the particular check point
tensorboard_callback=tf.keras.callbacks.TensorBoard(log_dir=logdir)

#fitting the model
#epoch is nothing but how long we are gonna train the data
hist=model.fit(train,epochs=10,validation_data=val,callbacks=[tensorboard_callback])

fig = plt.figure()
plt.plot(hist.history['loss'], color='teal', label='loss')
plt.plot(hist.history['val_loss'], color='orange', label='val_ loss')
fig.suptitle('Loss', fontsize=20)
plt.legend(loc="upper left")
plt.show()

fig = plt.figure()
plt.plot(hist.history['accuracy'], color='teal', label='accuracy')
plt.plot(hist.history['val_accuracy'], color='orange', label='val_ accuarcy')
fig.suptitle('Accuracy', fontsize=20)
plt.legend(loc="upper left")
plt.show()

"""**EVALUATING PERFORMANCE**

**evaluate**
"""

from tensorflow.keras.metrics import Precision, Recall, BinaryAccuracy

pre=Precision()
re=Recall()
acc=BinaryAccuracy()

for batch in test.as_numpy_iterator():
  X, y=batch
  yhat=model.predict(X)
  pre.update_state(y,yhat)
  re.update_state(y,yhat)
  acc.update_state(y,yhat)

#precision is measure of quality
#recall is measure of quantity
print("precision=",pre.result().numpy())
print("recall=",re.result().numpy())
print("accuracy=",acc.result().numpy())

"""**TEST**"""

import cv2

img=cv2.imread("/content/drive/MyDrive/10253/10253/1/10253_idx5_x551_y351_class1.png")
plt.imshow(img)
plt.show()

resize=tf.image.resize(img,(256,256))
plt.imshow(resize.numpy().astype(int))
plt.show()

np.expand_dims(resize,0).shape

yhat=model.predict(np.expand_dims(resize/255,0))

yhat

if yhat >0.5:
  print("malignant")
else:
    print("benign")

"""# New section"""



